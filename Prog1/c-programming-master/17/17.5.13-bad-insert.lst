#if 0
/*
Case 1:  new_node->value < head->value  (beginning)

  assign address of structure pointed to by head to new_node->next
  assign address of structure pointed to by new_node to head
  return head

  i.e.,
  new_node->next = head;
  head           = new_node;
  return head;

Cases 2     :  new_node->value <= last->value  (middle)
       and 3:  new_node->value >  last->value  (end)
  assign address of structure pointed to by head to current and NULL to previous
  while current is != NULL and current->value <= new_node->value
    advance current and previous, i.e:
      assign address of structure pointed to by current to previous (prev = cur;)
      assign address of structure pointed to by current->next to current (cur = cur->next;)

  assign address of structure pointed to by new_node to previous->next
      i.e. (prev->next = new_node;)
      works for middle and end

  if current != NULL (because current->next was NOT null on last iteration of the loop, i.e, a middle case)
      assign address of structure pointed to by current to new_node->next   (new_node->next = current;)


  return head
*/
#endif
